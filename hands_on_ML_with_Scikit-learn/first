import os
import tarfile
from six.moves import urllib
import pandas as pd
from IPython.display import display
from tabulate import tabulate
import matplotlib.pyplot as plt
import numpy as np

DOWNLOAD_ROOT = "https://raw.githubusercontent.com/ageron/handson-ml/master/"
HOUSING_PATH = "datasets/housing"
HOUSING_URL = DOWNLOAD_ROOT + HOUSING_PATH + "/housing.tgz"

def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):
    if not os.path.isdir(housing_path):
        os.makedirs(housing_path)
    tgz_path = os.path.join(housing_path, "housing.tgz") 
    urllib.request.urlretrieve(housing_url, tgz_path)
    housing_tgz = tarfile.open(tgz_path)
    housing_tgz.extractall(path=housing_path)
    housing_tgz.close()

def load_housing_data(housing_path=HOUSING_PATH):
    csv_path = os.path.join(housing_path, "housing.csv")
    return pd.read_csv(csv_path)

def color_negative_red(val):
    """
    Takes a scalar and returns a string with
    the css property `'color: red'` for negative
    strings, black otherwise.
    """
    color = 'blue' if val > 90 else 'black'
    return 'color: % s' % color

def split_train_test(data, test_ratio):
    shuffled_indices = np.random.permutation(len(data))
    test_set_size = int(len(data)*test_ratio)
    test_indices = shuffled_indices[:test_set_size]
    train_indices = shuffled_indices[test_set_size:]
    return data.iloc[train_indices], data.iloc[test_indices]

if __name__ == "__main__":
    #fetch_housing_data()
    housing = load_housing_data()
    df = housing.head()

    #show data in table using tabulate()
    print(tabulate(df, headers = 'keys', tablefmt = 'psql'))

    #The info() method is useful to get a quick description of the data
    housing.info()
    print()

    #You can find out what categories exist and how many districts 
    # belong to each category by using the value_counts() method
    print(housing["ocean_proximity"].value_counts())
    print()

    #The describe() method shows a summary of the numerical attributes
    #The 25%, 50%, and 75% rows show the corresponding percentiles: a percentile 
    #indicates the value below which a given percentage of observations in a group of 
    #observations falls. For example, 25% of the districts have a housing_median_age lower than
    #while 50% are lower than 29 and 75% are lower than 37
    print(housing.describe())
    print()
    
    #A histogram shows the number of instances (on the vertical axis) 
    # that have a given value range (on the horizontal axis).
    housing.hist(bins=50, figsize=(20,15))
    # plt.show()

    train_set, test_set = split_train_test(housing, 0.2)
    print(len(train_set), "train + ", len(test_set), "test")
    print()
   